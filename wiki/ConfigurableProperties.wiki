#summary List of the properties available to tweak the API

==MBean attributes==
The following java attributes can be modified at runtime:


====defaultRatePerRequestInKiloBytes====

The default upload rate per request in kilo bytes. (Default is 1024 (1MB/s))

====defaultRatePerClientInKiloBytes====

The default upload rate per client in kilo bytes. (Default is 10240 (10MB/s))

====maximumRatePerClientInKiloBytes====

The maximum upload rate per client in kilo bytes. (Default is 10240 (10MB/s))

====maximumOverAllRateInKiloBytes====

The maximum total upload rate in kilo bytes. (Default is 10240 (10MB/s))

----

==javascript-attributes==

====maxNumberOfConcurrentUploads====

_default value is *5*_

All browsers are limiting the number of concurrent requests that are active against a similar domain. Chrome and Firefox limit is set to 6. 

All requests are then queued but the problem is that the upload streaming requests are (as you can imagine) quite long. If that limit is more than 6, the progress poller requests would be queued and no progress would be retrieved for as long as the files are streamed.

Also, depending of what you want to achieve, it could make sense to allow a maximum of 1 concurrent request as the bandwidth is shared anyway between all the concurrent uploads.

It is advised to use a number between 1 and 5 so that there is always at least one request left for progress poller.

Use [JavaLargeFileUploader#setMaxNumberOfConcurrentUploads].

====errorMessages====

The error messages can be modified and/or translated by the page using the API.
They are stored inside a map that can be modified from the page.

The initial content of the map is:
{{{
errorMessages[0] = "Request failed for an unknown reason, please contact an administrator if the problem persists.";
errorMessages[1] = "The request is not multipart.";
errorMessages[2] = "No file to upload found in the request.";
errorMessages[3] = "CRC32 Validation of the part failed.";
errorMessages[4] = "The request cannot be processed because a parameter is missing.";
errorMessages[5] = "Cannot retrieve the configuration.";
errorMessages[6] = "No files have been selected, please select at least one file!";
errorMessages[7] = "Resuming file upload with previous slice as the last part is invalid.";
errorMessages[8] = "Error while uploading a slice of the file";
errorMessages[9] = "Maximum number of concurrent uploads reached, the upload is queued and waiting for one to finish.";
}}}
You can retrieve this map using [JavaLargeFileUploader#getErrorMessages] and modify them directly.

====progressPollerRefreshRate====

_default value is *500*_

The [Flow#Progress-Poller progress poller] is sending a new request to the server every _x_ amount of milliseconds, _x_ being the value of this variable.

Use [JavaLargeFileUploader#setProgressPollerRefreshRate] to set this value up.

====autoretry====

_default autoretry value is *true*_
_default autoretry delay is *1000*_

Whenever the connection is lost, the API can try to resume the file upload automatically. 

If the autoretry value is true, it will retry every _x_ milliseconds, _x_ being the delay.

Use [JavaLargeFileUploader#setAutoRetry] to set these values up.