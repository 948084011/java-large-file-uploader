#summary Description of how the uploads are processed

The initialization step retrieves information from the server using a cookie stored in the browser.
The information retrieved is:
  * The size of the slices that will be streamed
For all the files:
  * The [PendingFile#id id] of the file on the server
  * The [PendingFile#fileCompletionInBytes completion] of the file
  * The [PendingFile#originalFizeSizeInBytes original file size] 
  * The [PendingFile#originalFileName original file name]
  * The [PendingFile#crcedBytes number of bytes that have been validated]
  * The [PendingFile#firstChunkCrc crc32] information related to the beginning of this file
  * The [PendingFile#percentageCompleted percentage of completion]
These information will be stored in a new instance of PendingFile for each of these files.
At that point, the #Progress-Poller is started.
  
When the JavaLargeFileUploader#fileUploadProcess method is executed, the API will extract the information related to all the files and fill a new PendingFile object without an ID for each of these files.

All of the files will be compared against the pending files retrieved from the server, that first validation is performed against the file name and the file size
If the file name and the file size are similar, the API will process a second validation processing a CRC32 of a small slice of this file on the javascript side compared to the crc32 of the same slice of the file on the server to ensure these files are the same one. That crc32 is performed by default on the 8192 first bytes of this file or the available validated size if below this value.
If the result of that crc32 is matching the one of the server, the file is assumed as the same, the two PendingFile objects will be merged and the upload will be resumed. => #Resume-Upload
If the crc32 differs from the server, a new upload will be processed. => #New-Upload

===New-Upload===
When a new upload is initiated, a first server-call is performed to prepare the upload with all the file information. An ID is generated by the server and returned to the client-side to identify the PendingFile object.
Once this preparation step is performed, the JavaLargeFileUploader#startCallback is called for each of the files.
The #File-Streaming is then started for the file.

===Resume-Upload===

===File-Streaming===

  

===Progress-Poller===  